// Copyright 2021 Adam Chalkley
//
// https://github.com/atc0005/query-meta
//
// Licensed under the MIT License. See LICENSE file in the project root for
// full license information.

package config

// LogLevel returns the user-provided logging level or the default value if
// not provided.
func (c Config) LogLevel() string {

	switch {
	case c.fileConfig.LogLevel != nil:
		return *c.fileConfig.LogLevel
	default:
		return defaultLogLevel
	}
}

// FileRuntimeLog returns the user-provided path to the runtime or operational
// messages log file.
// func (c Config) FileRuntimeLog() string {
//
// 	switch {
// 	case c.fileConfig.FileRuntimeLog != nil:
// 		return *c.fileConfig.FileRuntimeLog
// 	default:
// 		return defaultFileRuntimeLog
// 	}
// }

// FileErrorLog returns the user-provided path to the error log file.
// func (c Config) FileErrorLog() string {
//
// 	switch {
// 	case c.fileConfig.FileErrorLog != nil:
// 		return *c.fileConfig.FileErrorLog
// 	default:
// 		return defaultFileErrorLog
// 	}
// }

// FileOutput returns the user-provided path to the output file to be
// generated by this application.
// func (c Config) FileOutput() string {
//
// 	switch {
// 	case c.fileConfig.FileOutput != nil:
// 		return *c.fileConfig.FileOutput
// 	default:
// 		return defaultFileOutput
// 	}
// }

// DBServerHost returns the user-provided database server host or the default
// value if not provided.
func (c Config) DBServerHost() string {
	switch {
	case c.fileConfig.Host != nil:
		return *c.fileConfig.Host
	default:
		return defaultDBServerHost
	}
}

// DBServerPort returns the user-provided database server port or the default
// value if not provided.
func (c Config) DBServerPort() int {
	switch {
	case c.fileConfig.Port != nil:
		return *c.fileConfig.Port
	default:
		return defaultDBServerPort
	}
}

// DBServerInstance returns the user-provided database server instance or the
// default value if not provided.
func (c Config) DBServerInstance() string {
	switch {
	case c.fileConfig.Instance != nil:
		return *c.fileConfig.Instance
	default:
		return defaultDBServerInstance
	}
}

// DBServerUsername returns the user-provided database server username or the
// default value if not provided.
func (c Config) DBServerUsername() string {
	switch {
	case c.fileConfig.Username != nil:
		return *c.fileConfig.Username
	default:
		return defaultDBServerUsername
	}
}

// DBServerPassword returns the user-provided database server password or the
// default value if not provided.
func (c Config) DBServerPassword() string {
	switch {
	case c.fileConfig.Password != nil:
		return *c.fileConfig.Password
	default:
		return defaultDBServerPassword
	}
}

// DBServerEncryptMode returns the user-provided encrypt mode or the default
// value if not provided.
func (c Config) DBServerEncryptMode() string {
	switch {
	case c.fileConfig.EncryptMode != nil:
		return *c.fileConfig.EncryptMode
	default:
		return defaultDBServerEncryptMode
	}
}

// DBServerTrustCert returns the user-provided choice of whether the database
// server certificate is trusted as-is or if validation is enforced, or the
// default value if not provided.
func (c Config) DBServerTrustCert() bool {
	switch {
	case c.fileConfig.TrustCert != nil:
		return *c.fileConfig.TrustCert
	default:
		return defaultDBServerTrustCert
	}
}

// DBName returns the user-provided database name or the default value if not
// provided.
func (c Config) DBName() string {
	switch {
	case c.fileConfig.DBName != nil:
		return *c.fileConfig.DBName
	default:
		return defaultDBName
	}
}

// DBTable returns the user-provided database table name or the default value
// if not provided.
func (c Config) DBTable() string {
	switch {
	case c.fileConfig.DBTable != nil:
		return *c.fileConfig.DBTable
	default:
		return defaultDBTableName
	}
}

// DBQueryCountAllRecords returns the user-provided query for determining the
// count of all patron records or the default value if not provided.
func (c Config) DBQueryCountAllRecords() string {
	switch {
	case c.fileConfig.DBQueryCountAllRecords != nil:
		return *c.fileConfig.DBQueryCountAllRecords
	default:
		return defaultDBQueryCountAllRecords
	}
}

// DBQueryCountInactiveRecords returns the user-provided query for determining
// the count of all inactive patron records or the default value if not
// provided.
func (c Config) DBQueryCountInactiveRecords() string {
	switch {
	case c.fileConfig.DBQueryCountInactiveRecords != nil:
		return *c.fileConfig.DBQueryCountInactiveRecords
	default:
		return defaultDBQueryCountInactiveRecords
	}
}

// DBQueryRetrieveActivePatronRecords returns the user-provided query for
// retrieving all active patron records or the default value if not provided.
func (c Config) DBQueryRetrieveActivePatronRecords() string {
	switch {
	case c.fileConfig.DBQueryRetrieveActivePatronRecords != nil:
		return *c.fileConfig.DBQueryRetrieveActivePatronRecords
	default:
		return defaultDBQueryRetrieveActivePatronRecords
	}
}
